z = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
distances = rand(5)*1000;
    
initialvalues = rand(25, 1);
tspan = [0 10];
sigmas = rand(5, 1); 
k = 0.1;
alphas = rand(5, 1);
Incomes = rand(5, 1)*100000;
gammas = 0.05;
lambdas = rand(3, 1);
    
% Calculate betas
betas = calculate_betas(z, distances);
    
% Run SIV_RUN_ODE45 function
culmulativeCases = rand(10, 1);
value = SIV_RUN_ODE45(z, culmulativeCases, initialvalues, tspan, betas, sigmas, k, alphas, Incomes, gammas, lambdas);
    
disp(['Result of SIV_RUN_ODE45: ' num2str(value)]);

function dx = SIV(t, x, betas, sigmas, k, alphas, Incomes, gammas, lambdas)
    num_compartments = length(x) / 5;
    dx = zeros(5 * num_compartments, 1);
    
    for j = 1:num_compartments
        Sj = x((j-1)*5 + 1);
        Ej = x((j-1)*5 + 2);
        Ij = x((j-1)*5 + 3);
        Rj = x((j-1)*5 + 4);
        Vj = x((j-1)*5 + 5);
        
        Beta = betas * reshape(x(3:5:end), num_compartments, 1);

        dx((j-1)*5 + 1) = -Beta(j) * Sj + sigmas(j) * Rj;
        dx((j-1)*5 + 2) = Beta(j) * Sj - k * Ej;
        dx((j-1)*5 + 3) = k * Ej - alphas(j) * Incomes(j) * Ij;
        dx((j-1)*5 + 4) = alphas(j) * Incomes(j) * Ij - sigmas(j) * Rj;
        dx((j-1)*5 + 5) = gammas * (lambdas(1) * Ej + lambdas(2) * Ij + lambdas(3) * Rj);
    end
end

function betas = calculate_betas(z, distances)
    num_compartments = (length(z) - 2) / 8;
    
    beta_star = 1.67391974668301e-08;
    n_values = z(1:num_compartments);
    constant = z(num_compartments + 1);
    eta_vax = z(end - num_compartments + 1:end);
    betas = zeros(num_compartments, num_compartments);
    
    % Loop to calculate betas matrix
    for i = 1:num_compartments
        for j = 1:num_compartments
            distance_between_i_and_j = distances(i+2, j+1);
            % Calculate betas based on the given formula
            betas(i,j) = beta_star / n_values(j) * 1 / (1 + (distance_between_i_and_j) / constant) * eta_vax(j);
        end
    end
end

function value = SIV_RUN_ODE45(z, culmulativeCases, initialvalues, tspan, betas, sigmas, k, alphas, Incomes, gammas, lambdas)
    x0 = initialvalues(:);

    [~, y] = ode45(@(t, x) SIV(t, x, betas, sigmas, k, alphas, Incomes, gammas, lambdas), tspan, x0);

    CI = y(:,4);
    diff=CI-reshape(culmulativeCases(30:60),size(CI));

    value = norm(diff,2);
end